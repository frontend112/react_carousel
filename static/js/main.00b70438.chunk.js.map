{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","itemPosition","maxItemPosition","length","carouselList","useRef","wrapper","useEffect","current","style","width","transition","toString","className","type","onClick","transform","ref","map","image","index","src","alt","cn","App","useState","carouselElements","setCarouselElements","handleChange","event","target","value","id","state","htmlFor","onChange","min","name","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00b70438.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport cn from 'classnames';\n\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  let itemPosition = 0;\n  const maxItemPosition = images.length - frameSize;\n\n  const carouselList = useRef<HTMLUListElement>(null);\n  const wrapper = useRef<HTMLDivElement>(null);\n\n  const handlePrevClick = () => {\n    if (infinite && itemPosition === 0) {\n      itemPosition = maxItemPosition + step;\n    }\n\n    if (itemPosition > 0) {\n      itemPosition -= step;\n    }\n\n    if (itemPosition < 0) {\n      itemPosition = 0;\n    }\n\n    if (carouselList && carouselList.current) {\n      carouselList.current.style.transform\n      = itemPosition <= 0\n          ? 'translateX(0)'\n          : `translateX(${-itemPosition * itemWidth}px)`;\n    }\n  };\n\n  const handleNextClick = () => {\n    if (infinite && itemPosition === maxItemPosition) {\n      itemPosition = -step;\n    }\n\n    if (itemPosition < maxItemPosition) {\n      itemPosition += step;\n    }\n\n    if (itemPosition >= maxItemPosition) {\n      itemPosition = maxItemPosition;\n    }\n\n    if (carouselList && carouselList.current) {\n      carouselList.current.style.transform\n      = itemPosition >= maxItemPosition\n          ? `translateX(${(-maxItemPosition) * itemWidth}px)`\n          : `translateX(${-itemPosition * itemWidth}px)`;\n    }\n  };\n\n  useEffect(() => {\n    if (wrapper && wrapper.current) {\n      wrapper.current.style.width = `${itemWidth * frameSize}px`;\n    }\n\n    if (carouselList && carouselList.current) {\n      carouselList.current.style.transition = `${animationDuration.toString()}ms`;\n    }\n  }, [itemWidth, frameSize, animationDuration]);\n\n  return (\n    <div className=\"Carousel\">\n      <button\n        type=\"button\"\n        onClick={handlePrevClick}\n        className=\"Carousel__arrow Carousel__arrow--prev\"\n      >\n        {'<='}\n      </button>\n      <div className=\"Carousel__list-wrapper\" ref={wrapper}>\n        <ul className=\"Carousel__list\" ref={carouselList}>\n          {\n            images.map((image, index) => (\n              <li key={image}>\n                <img\n                  src={image}\n                  alt={index.toString()}\n                  width={itemWidth}\n                  className=\"Carousel__image\"\n                />\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n\n      <button\n        type=\"button\"\n        onClick={handleNextClick}\n        data-cy=\"next\"\n        className={cn(\n          'Carousel__arrow Carousel__arrow--next',\n        )}\n      >\n        {'=>'}\n      </button>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import { FC, ChangeEvent, useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\n// interface State {\n//   images: string[];\n//   step: number;\n//   frameSize: number;\n//   itemWidth: number;\n//   // infinite: boolean;\n// }\n\nconst App: FC = () => {\n  const images = [\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ];\n\n  const [carouselElements, setCarouselElements] = useState(\n    {\n      step: 2,\n      frameSize: 3,\n      itemWidth: 130,\n      animationDuration: 1000,\n      infinite: false,\n    },\n  );\n\n  const {\n    step,\n    frameSize,\n    itemWidth,\n    animationDuration,\n    infinite,\n  } = carouselElements;\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value, id } = event.target;\n\n    if (id === 'infinite') {\n      setCarouselElements(state => (\n        {\n          ...state,\n          infinite: !state.infinite,\n        }\n      ));\n\n      return;\n    }\n\n    setCarouselElements(state => (\n      {\n        ...state,\n        [id]: +value,\n      }\n    ));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 data-cy=\"title\">\n        Carousel with\n        {images.length}\n      </h1>\n\n      <div className=\"container\">\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"itemWidth\">Item Width:</label>\n        <input\n          type=\"number\"\n          value={itemWidth}\n          onChange={handleChange}\n          id=\"itemWidth\"\n          min=\"0\"\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"frameSize\">Frame size:</label>\n        <input\n          type=\"number\"\n          value={frameSize}\n          onChange={handleChange}\n          id=\"frameSize\"\n          min=\"0\"\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"step\">step:</label>\n        <input\n          type=\"number\"\n          value={step}\n          onChange={handleChange}\n          id=\"step\"\n          min=\"0\"\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"animationDuration\">animation duration:</label>\n        <input\n          type=\"number\"\n          value={animationDuration}\n          onChange={handleChange}\n          id=\"animationDuration\"\n          min=\"0\"\n        />\n      </div>\n\n      <form>\n        <label htmlFor=\"infinite\">infinite:</label>\n        <input\n          type=\"checkbox\"\n          name=\"infinite\"\n          id=\"infinite\"\n          onChange={handleChange}\n          checked={infinite === true}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}